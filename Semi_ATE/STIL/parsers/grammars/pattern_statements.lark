%import common.ESCAPED_STRING
%import base.IDENTIFIER
%import base.ANN_TEXT
%import base.USER_DEFINED_NAME
%import base.INT

pattern_statement : (LABEL | uk_stmt | uk_block_stmt | v_stmt | c_stmt | f_stmt | w_stmt | call_stmt | macro_stmt | l_stmt | ml_stmt | g_stmt | b_stmt | i_stmt | s_stmt | sc_stmt | asc_stmt | annotation)

uk_stmt :  USER_KEYWORD_NAME (USER_KEYWORD_VALUE)* ";"

USER_KEYWORD_NAME : (USER_KEYWORD_ID | USER_KEYWORD_ES)
USER_KEYWORD_VALUE: (USER_KEYWORD_ID | USER_KEYWORD_ES)

USER_KEYWORD_ID : IDENTIFIER
USER_KEYWORD_ES : ESCAPED_STRING

uk_block_stmt 	: USER_KEYWORD_NAME (USER_KEYWORD_VALUE)* open_uk_block (UK_BLOCK_VALUE ";")* close_uk_block

open_uk_block : "{"

UK_BLOCK_VALUE: /[a-zA-Z0-9=!@#$%^&*\" ]+/

close_uk_block : "}"

LABEL : USER_DEFINED_NAME (" ")* ":"

//v_stmt : ("V"         | "Vector")         vec_block
  v_stmt : (KEYWORD_V   | KEYWORD_VECTOR)   vec_block
  KEYWORD_V: "V"
  KEYWORD_VECTOR: "Vector"
    
//c_stmt : ("C"      | "Condition")         vec_block
  c_stmt : (KEYWORD_C| KEYWORD_CONDITION)   vec_block
  KEYWORD_C: "C"
  KEYWORD_CONDITION: "Condition"
  
//f_stmt : ("F"      | "Fixed")             vec_block
  f_stmt : (KEYWORD_F| KEYWORD_FIXED)       vec_block
  KEYWORD_F: "F"
  KEYWORD_FIXED: "Fixed"

//vec_block : "{"               (vec_data_block ";")* "}" 
  vec_block : OPEN_VECTOR_BLOCK (vec_data_block ";")* CLOSE_VECTOR_BLOCK

OPEN_VECTOR_BLOCK  : "{"
CLOSE_VECTOR_BLOCK : "}"

    vec_data_block: SIGREF_EXPR "=" VEC_DATA_STRING
    SIGREF_EXPR : USER_DEFINED_NAME
    VEC_DATA_STRING : /[A-Za-z0-9%#\\r\\j\\m\n ]+/


//w_stmt : ("W"       | "WaveformTable")        WAVEFORM_TABLE_NAME ";"
  w_stmt.1 : (KEYWORD_W | KEYWORD_WAVEFORM_TABLE) WAVEFORM_TABLE_NAME ";"
  KEYWORD_W.1: "W"
  KEYWORD_WAVEFORM_TABLE.1: "WaveformTable"
  
  WAVEFORM_TABLE_NAME.1 : USER_DEFINED_NAME

//macro_stmt : "Macro"       CALL_MACRO_NAME (";" | macro_vec_block)
  macro_stmt : KEYWORD_MACRO CALL_MACRO_NAME (MACRO_CALL_END_STMT | macro_vec_block)
  KEYWORD_MACRO.1: "Macro"
  CALL_MACRO_NAME : USER_DEFINED_NAME
  
  MACRO_CALL_END_STMT : ";"

  macro_vec_block : OPEN_MACRO_VECTOR_BLOCK (macro_vec_data_block ";")* CLOSE_MACRO_VECTOR_BLOCK
    OPEN_MACRO_VECTOR_BLOCK  : "{"
      macro_vec_data_block: MACRO_SIGREF_EXPR "=" MACRO_VEC_DATA_STRING
      MACRO_SIGREF_EXPR : USER_DEFINED_NAME
      MACRO_VEC_DATA_STRING : /[A-Za-z0-9\\r\\j\\m\n ]+/
    CLOSE_MACRO_VECTOR_BLOCK : "}"

//call_stmt : "Call"        CALL_PROC_NAME (";" | call_vec_block)
  call_stmt : KEYWORD_CALL  CALL_PROC_NAME (PROC_CALL_END_STMT | call_vec_block)
  KEYWORD_CALL.1    : "Call"
  CALL_PROC_NAME : USER_DEFINED_NAME

  PROC_CALL_END_STMT : ";"
  
  call_vec_block : OPEN_CALL_VECTOR_BLOCK (call_vec_data_block ";")* CLOSE_CALL_VECTOR_BLOCK
    OPEN_CALL_VECTOR_BLOCK  : "{"
      call_vec_data_block: CALL_SIGREF_EXPR "=" CALL_VEC_DATA_STRING
      CALL_SIGREF_EXPR : USER_DEFINED_NAME
      CALL_VEC_DATA_STRING : /[A-Za-z0-9\\r\\j\\m\n ]+/
    CLOSE_CALL_VECTOR_BLOCK : "}"

//l_stmt : "Loop"       LOOP_COUNT "{"             (pattern_statement)* "}"
  l_stmt : KEYWORD_LOOP (LOOP_COUNT | LOOP_VAR) OPEN_LOOP_BLOCK (pattern_statement)* close_loop_block
  KEYWORD_LOOP: "Loop"
  
  LOOP_COUNT : INT
  // IEEE 1450.1 allows variables in the loop
  LOOP_VAR   : USER_DEFINED_NAME
  
  OPEN_LOOP_BLOCK : "{"
  close_loop_block: "}"

//ml_stmt : "MatchLoop"         (MATCHLOOP_COUNT | MATCHLOOP_INF) "{" (pattern_statement)* "}"
  ml_stmt : KEYWORD_MATCH_LOOP  (MATCHLOOP_COUNT | MATCHLOOP_INF | MATCHLOOP_VAR) OPEN_MATCH_LOOP_BLOCK (pattern_statement)* close_matchloop_block
  KEYWORD_MATCH_LOOP: "MatchLoop"

  MATCHLOOP_COUNT : INT
  MATCHLOOP_INF : "Infinite"
  // IEEE 1450.1 allows variables in the loop
  MATCHLOOP_VAR   : USER_DEFINED_NAME

  OPEN_MATCH_LOOP_BLOCK : "{"
  close_matchloop_block: "}"

//g_stmt : "Goto" USER_DEFINED_NAME ";"
  g_stmt : KEYWORD_GOTO GOTO_LABEL ";"
  KEYWORD_GOTO.1 : "Goto"
  GOTO_LABEL : USER_DEFINED_NAME

//b_stmt : "BreakPoint"         (";" | break_point_block)
  b_stmt : KEYWORD_BREAKPOINT   (";" | break_point_block)
  KEYWORD_BREAKPOINT.1 : "BreakPoint"

//break_point_block : "{"                   (pattern_statement)* "}"
  break_point_block : OPEN_BREAKPOINT (pattern_statement)* "}"

  OPEN_BREAKPOINT : "{"
  CLOSE_BREAKPOINT: "}"


//i_stmt : "IddqTestPoint" ";"
  i_stmt : KEYWORD_IDDQ_TEST_POINT ";"
  KEYWORD_IDDQ_TEST_POINT.1 : ("IDDQTestPoint" | "IddqTestPoint")

//s_stmt : "Stop" ";"
  s_stmt : KEYWORD_STOP ";"
  KEYWORD_STOP.1 : "Stop"

//sc_stmt : "ScanChain" USER_DEFINED_NAME ";"
  sc_stmt : KEYWORD_SCAN_CHAIN  SCANCHAIN_NAME ";"
  KEYWORD_SCAN_CHAIN : "ScanChain"
  SCANCHAIN_NAME :USER_DEFINED_NAME

//shift_statement : "Shift"       "{"               (pattern_statement)* "}"
  shift_statement : KEYWORD_SHIFT open_shift_block  (pattern_statement)* close_shift_block
  KEYWORD_SHIFT : "Shift"
                    
  open_shift_block : "{"
  close_shift_block: "}" 

//  From 1450.1
    asc_stmt : "ActiveScanChains" (USER_DEFINED_NAME)* ";"
    
annotation: KEYWORD_ANN OPEN_ANN_BLOCK (ANN_TEXT)* CLOSE_ANN_BLOCK
KEYWORD_ANN: "Ann"
    
OPEN_ANN_BLOCK  : "{*"
ANNO_TEXT        : ANN_TEXT
CLOSE_ANN_BLOCK : "*}"

